{"version":3,"sources":["components/DrawingBoard/DrawingBoard.js","components/Header/Header.js","components/Toolbar/Toolbar.js","components/Toolbar/onClickOutsideHook.js","App.js","reportWebVitals.js","index.js"],"names":["DrawingBoard","cursorStyle","recordSroke","drawingBoardRef","useRef","canvasContext","history","useState","isDrawing","setIsDrawing","onMouseUp","event","useEffect","canvas","current","width","window","innerWidth","devicePixelRatio","height","innerHeight","style","getContext","scale","strokeStyle","lineWidth","clearRect","className","ref","onMouseDown","nativeEvent","offsetX","offsetY","i","length","state","globalAlpha","opacity","action","beginPath","moveTo","lineTo","stroke","restoreState","push","onMouseMove","onMouseOut","Header","Toolbar","handler","setCursorStyle","setRecordStroke","selectedTool","setSelectedTool","getCursorStyle","tool","toolbarRef","useCallback","listener","contains","target","document","addEventListener","removeEventListener","onClick","type","id","onChange","value","defaultValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c9c8fdf4.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './DrawingBoard.scss';\nfunction DrawingBoard({ cursorStyle, recordSroke }) {\n  const drawingBoardRef = useRef(null);\n  const canvasContext = useRef(null);\n  const history = useRef([]);\n\n  const [isDrawing, setIsDrawing] = useState(false);\n\n  useEffect(() => {\n    const canvas = drawingBoardRef.current;\n    canvas.width = (window.innerWidth - 200) * window.devicePixelRatio;\n    canvas.height = (window.innerHeight - 150) * window.devicePixelRatio;\n    canvas.style.width = `${window.innerWidth - 200}px`;\n    canvas.style.height = `${window.innerHeight - 150}px`;\n    canvasContext.current = canvas.getContext('2d');\n    canvasContext.current.scale(\n      window.devicePixelRatio,\n      window.devicePixelRatio\n    );\n    canvasContext.current.strokeStyle = 'black';\n    canvasContext.current.lineWidth = 2;\n    return () => {\n      canvasContext.current.clearRect(0, 0, canvas.width, canvas.height);\n    };\n  }, []);\n\n  function onMouseDown(event) {\n    const { offsetX, offsetY } = event.nativeEvent;\n    if (!canvasContext || !canvasContext.current) return;\n    setIsDrawing(true);\n    restoreState();\n    canvasContext.current.strokeStyle = cursorStyle.strokeStyle;\n    canvasContext.current.lineWidth = cursorStyle.lineWidth;\n    canvasContext.current.globalAlpha = cursorStyle.opacity;\n    if (recordSroke) {\n      history.current.push({\n        action: 'beginPath',\n        offsetX,\n        offsetY,\n        ...cursorStyle,\n      });\n    }\n    canvasContext.current.beginPath();\n    canvasContext.current.moveTo(offsetX, offsetY);\n  }\n  function onMouseUp(event) {\n    setIsDrawing(false);\n  }\n  function onMouseMove(event) {\n    const { offsetX, offsetY } = event.nativeEvent;\n    if (!canvasContext || !canvasContext.current || !isDrawing) return;\n    if (recordSroke) {\n      history.current.push({\n        action: 'lineTo',\n        offsetX,\n        offsetY,\n        ...cursorStyle,\n      });\n    }\n    canvasContext.current.lineTo(offsetX, offsetY);\n    canvasContext.current.stroke();\n  }\n\n  function restoreState() {\n    let i = 0;\n    canvasContext.current.clearRect(\n      0,\n      0,\n      drawingBoardRef.current.width,\n      drawingBoardRef.current.height\n    );\n    while (i < history.current.length) {\n      let state = history.current[i];\n      canvasContext.current.strokeStyle = state.strokeStyle;\n      canvasContext.current.lineWidth = state.lineWidth;\n      canvasContext.current.globalAlpha = state.opacity;\n      if (state.action === 'beginPath') {\n        canvasContext.current.beginPath();\n        canvasContext.current.moveTo(state.offsetX, state.offsetY);\n      } else {\n        canvasContext.current.lineTo(state.offsetX, state.offsetY);\n        canvasContext.current.stroke();\n      }\n      i++;\n    }\n  }\n\n  return (\n    <canvas\n      className=\"drawingBoard\"\n      ref={drawingBoardRef}\n      onMouseDown={onMouseDown}\n      onMouseUp={onMouseUp}\n      onMouseMove={onMouseMove}\n      onMouseOut={onMouseUp}\n    />\n  );\n}\n\nDrawingBoard.propTypes = {\n  cursorStyle: PropTypes.shape({\n    lineWidth: PropTypes.number,\n    opacity: PropTypes.number,\n    strokeStyle: PropTypes.string,\n  }),\n  recordSroke: PropTypes.bool,\n};\n\nexport default DrawingBoard;\n","import React from 'react';\nimport './Header.scss';\n\nfunction Header() {\n  return <div className=\"Header\">Whiteboard</div>;\n}\n\nexport default Header;\n","import React, { useState, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport useOnClickOutside from './onClickOutsideHook';\nimport './Toolbar.scss';\n\nfunction Toolbar({ cursorStyle, setCursorStyle, setRecordStroke }) {\n  const [selectedTool, setSelectedTool] = useState(null);\n\n  const onColorChange = (event) => {\n    setCursorStyle({ ...cursorStyle, strokeStyle: event.target.value });\n  };\n\n  const getCursorStyle = (lineWidth, opacity, strokeStyle, tool) => {\n    if (strokeStyle === 'white' && tool !== 'eraser') {\n      strokeStyle = 'black';\n    }\n    if (opacity === 0.5 && tool !== 'highlighter') {\n      opacity = 1;\n    }\n    return { lineWidth, opacity, strokeStyle };\n  };\n  const toolbarRef = useRef();\n\n  useOnClickOutside(\n    toolbarRef,\n    useCallback(() => setSelectedTool(null), [])\n  );\n\n  return (\n    <div className=\"Toolbar\" ref={toolbarRef}>\n      <div className=\"Tools_Container\">\n        <div\n          className={`Tool Brush Tooltip ${\n            selectedTool === 'brush' ? 'selected' : ''\n          }`}\n          onClick={() => {\n            setSelectedTool('brush');\n            setCursorStyle(\n              getCursorStyle(1, 1, cursorStyle.strokeStyle, 'brush')\n            );\n          }}\n        >\n          <div className=\"Tooltip_Text\">Brush</div>\n        </div>\n        <div\n          className={`Tool Highlighter Tooltip ${\n            selectedTool === 'highlighter' ? 'selected' : ''\n          }`}\n          onClick={() => {\n            setSelectedTool('highlighter');\n            setRecordStroke(false);\n            setCursorStyle(\n              getCursorStyle(5, 0.5, cursorStyle.strokeStyle, 'highlighter')\n            );\n          }}\n        >\n          <div className=\"Tooltip_Text\">Highlighter</div>\n        </div>\n        <div\n          className={`Tool Eraser Tooltip ${\n            selectedTool === 'eraser' ? 'selected' : ''\n          }`}\n          onClick={() => {\n            setSelectedTool('eraser');\n            setCursorStyle(getCursorStyle(5, 1, 'white', 'eraser'));\n            setRecordStroke(true);\n          }}\n        >\n          <div className=\"Tooltip_Text\">Eraser</div>\n        </div>\n      </div>\n      {(selectedTool === 'brush' || selectedTool === 'highlighter') && (\n        <div className=\"SubTools_Container\">\n          {selectedTool === 'brush' && (\n            <>\n              <div\n                className=\"Brush_Thickness Tooltip\"\n                onClick={() => {\n                  setCursorStyle(\n                    getCursorStyle(1, 1, cursorStyle.strokeStyle, 'brush')\n                  );\n                  setSelectedTool(null);\n                  setRecordStroke(true);\n                }}\n              >\n                <div className=\"Brush_Small\" />\n                <div className=\"Tooltip_Text\">1px</div>\n              </div>\n              <div\n                className=\"Brush_Thickness Tooltip\"\n                onClick={() => {\n                  setCursorStyle(\n                    getCursorStyle(3, 1, cursorStyle.strokeStyle, 'brush')\n                  );\n                  setSelectedTool(null);\n                  setRecordStroke(true);\n                }}\n              >\n                <div className=\"Brush_Medium\" />\n                <div className=\"Tooltip_Text\">3px</div>\n              </div>\n              <div\n                className=\"Brush_Thickness Tooltip\"\n                onClick={() => {\n                  setCursorStyle(\n                    getCursorStyle(5, 1, cursorStyle.strokeStyle, 'brush')\n                  );\n                  setSelectedTool(null);\n                  setRecordStroke(true);\n                }}\n              >\n                <div className=\"Brush_Large\" />\n                <div className=\"Tooltip_Text\">5px</div>\n              </div>\n            </>\n          )}\n          <div className=\"Tool_Color Tooltip\">\n            <input\n              type=\"color\"\n              id=\"html5colorpicker\"\n              onChange={onColorChange}\n              defaultValue={cursorStyle.strokeStyle}\n            />\n            <div className=\"Tooltip_Text\">Color Picker</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nToolbar.propTypes = {\n  cursorStyle: PropTypes.shape({\n    lineWidth: PropTypes.number,\n    opacity: PropTypes.number,\n    strokeStyle: PropTypes.string,\n  }),\n  setCursorStyle: PropTypes.func,\n  setRecordStroke: PropTypes.func,\n};\n\nexport default Toolbar;\n","import { useEffect } from 'react';\n\n// Hook\nexport default function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      handler(event);\n    };\n    document.addEventListener('click', listener);\n    return () => {\n      document.removeEventListener('click', listener);\n    };\n  }, [ref, handler]);\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport DrawingBoard from './components/DrawingBoard';\nimport Header from './components/Header';\nimport Toolbar from './components/Toolbar';\n\nfunction App() {\n  const [cursorStyle, setCursorStyle] = useState({\n    lineWidth: 1,\n    strokeStyle: 'black',\n  });\n\n  const [recordSroke, setRecordStroke] = useState(true);\n  return (\n    <div className=\"App\">\n      <DrawingBoard cursorStyle={cursorStyle} recordSroke={recordSroke} />\n      <Header />\n      <Toolbar\n        cursorStyle={cursorStyle}\n        setCursorStyle={setCursorStyle}\n        setRecordStroke={setRecordStroke}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}